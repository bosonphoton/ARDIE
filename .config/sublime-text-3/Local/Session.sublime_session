{
	"folder_history":
	[
	],
	"last_version": 3211,
	"last_window_id": 1,
	"log_indexing": false,
	"settings":
	{
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"contents": "#!/usr/bin/env python\n\nfrom parser import Policy,Solver\nfrom pomdp_parser import Model\n# from pomdp_solver import generate_policy\nimport numpy as np\nnp.set_printoptions(precision=2)     # for better belief printing\nimport random\nimport pathlib\nimport pandas as pd\nimport os\n########################\nfrom get_dialogue import hear_color, ask_to_look, hear_confirmation\nimport rospy\nimport actionlib\n\nimport time\n#from ur5_init_node_av.py import MoveGroupInteface\nfrom std_msgs.msg import String\nfrom sound_play.libsoundplay import SoundClient\n\nimport subprocess\nimport sys\n\nimport rospy\nimport actionlib\nfrom geometry_msgs.msg import Twist\nfrom move_base_msgs.msg import MoveBaseAction, MoveBaseGoal, MoveBaseFeedback\nfrom actionlib_msgs.msg import *\nfrom geometry_msgs.msg import Pose, Point, PoseWithCovarianceStamped, Quaternion, PoseStamped\nfrom nav_msgs.srv import GetPlan\nfrom nav_msgs.msg import Odometry\nfrom actionlib_msgs.msg import *\nimport std_srvs.srv\nfrom std_msgs.msg import String, Float32, Empty\nimport time\n\ncurrent_table_number = None\ncount = 0\n\nclass Simulator:\n\tdef __init__(self, solve_pomdp=False):\n\n\t\t#path to pomdp file stored\n\t\tpomdp_file =  '/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/appl/src/model_update_2.pomdp'\n\t\tassert pathlib.Path(pomdp_file).is_file(), 'POMDP path does not exist'\n\n\t\tsolver_path = '/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/appl/src/pomdpsol'\n\t\tassert pathlib.Path(solver_path).is_file(), 'Solver path does not exist'\n\n\t\tself.model = Model(pomdp_file=pomdp_file, parsing_print_flag=True)\n\t\tprint(self.model.states)\n\t\tprint(self.model.actions)\n\t\tprint(self.model.trans_mat.shape)\n\n\t\tpolicy_file = '/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/appl/src/out.policy'\n\t\tprint (policy_file)\n\t\t# if solve_pomdp:\n\t\t# \tgenerate_policy(solver_path,pomdp_file,policy_file)\n\t\t# #assert pathlib.Path(policy_file).is_file(), 'POLICY path does not exist'\n\n\t\tself.policy = Policy(len(self.model.states),\n\t\t\t\t\t\t\tlen(self.model.actions),\n\t\t\t\t\t\t\tpolicy_file=policy_file)\n\n\n\tdef update(self, a_idx,o_idx,b ):\n\t\t'''Update belief using Bayes update rule'''\n\t\tb = np.dot(b, self.model.trans_mat[a_idx, :])\n\t\tb = [b[i] * self.model.obs_mat[a_idx, i, o_idx] for i in range(len(self.model.states))]\n\t\tb = b / sum(b)\n\n\t\treturn b\n\n\tdef pretty_print(self,b):\n\t\tdf = pd.DataFrame(b,index=False, columns=self.model.states)\n\t\tprint (df)\n\n\n\tdef observe(self,a_idx,next_state):\n\t\tglobal count\n\t\tif a_idx == 0: #gaze\n\t\t\t# ask_to_look()\n\t\t\t# while(current_table_number == None):\n\t\t\t# \tprint \"Waiting for gaze input\"\n\t\t\t# return current_table_number\n\t\t\treturn \"table1\"\n\n\t\t\t# return \"table1\"\n\t\t\t# if count == 0:\n\t\t\t# \t#time.sleep(1)\n\t\t\t# \treturn \"table2\"\n\t\t\t# else:\n\t\t\t# \t#time.sleep(1)\n\t\t\t# \treturn \"table1\"\n\n\n\t\telif a_idx == 1: #ask color\n\t\t\t# dialogue_c = hear_color()\n\t\t\t# return dialogue_c\n\t\t\treturn \"red\"\n\n\n\t\t\t# if count == 0:\n\t\t\t# \t#time.sleep(1)\n\t\t\t# \treturn \"green\"\n\t\t\t# elif count == 1:\n\t\t\t# \t#time.sleep(1)\n\t\t\t# \treturn \"red\"\n\t\t\t# else:\n\t\t\t# \t#time.sleep(1)\n\t\t\t# \treturn \"blue\"\n\t\t\t# return np.random.choice([\"red\",\"green\",\"blue\"])\n\n\n#################START UR5e ARM CODE #######################################\n\n\t\telif a_idx == 2: #project AR & do robot stuff\n\t\t\tprojectARObject.publish(\"red_1\")\n\t\t\tscript_red1 = \"/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/ur5_red1.py\"\n\t\t\tsubprocess.call(['python', script_red1], stdout=sys.stdout, stderr=subprocess.STDOUT)\n\t\t\tprint(\"ROBOT projecting red 1\")\n\t\t\ttime.sleep(5)\n\t\t\treturn 'grasp'\n\n\t\telif a_idx == 3: #project AR\n\t\t\tprojectARObject.publish(\"blue_1\")\n\t\t\tscript_blue1 = \"/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/ur5_blue1.py\"\n\t\t\tsubprocess.call(['python', script_blue1], stdout=sys.stdout, stderr=subprocess.STDOUT)\n\t\t\tprint(\"ROBOT projecting blue 1\")\n\t\t\ttime.sleep(5)\n\t\t\treturn 'grasp'\n\n\n\t\telif a_idx == 4: #project AR\n\t\t\tprojectARObject.publish(\"green_1\")\n\t\t\tscript_green1 = \"/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/ur5_green1.py\"\n\t\t\tsubprocess.call(['python', script_green1], stdout=sys.stdout, stderr=subprocess.STDOUT)\n\t\t\tprint(\"ROBOT projecting green 1\")\n\t\t\ttime.sleep(5)\n\t\t\treturn 'grasp'\n\n\t\telif a_idx == 5: #project AR\n\t\t\tprojectARObject.publish(\"red_2\")\n\t\t\tscript_red2 = \"/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/ur5_red2.py\"\n\t\t\tsubprocess.call(['python', script_red2], stdout=sys.stdout, stderr=subprocess.STDOUT)\n\t\t\tprint(\"ROBOT projecting red 2\")\n\t\t\ttime.sleep(5)\n\t\t\treturn 'grasp'\n\n\t\telif a_idx == 6:\n\t\t\tprojectARObject.publish(\"blue_2\")\n\t\t\tscript_blue2 = \"/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/ur5_blue2.py\"\n\t\t\tsubprocess.call(['python', script_blue2], stdout=sys.stdout, stderr=subprocess.STDOUT)\n\t\t\tprint(\"ROBOT projecting blue 2\")\n\t\t\ttime.sleep(5)\n\t\t\treturn 'grasp'\n\n\t\telif a_idx == 7:\n\t\t\tprojectARObject.publish(\"green_2\")\n\t\t\tscript_green2 = \"/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/ur5_green2.py\"\n\t\t\tsubprocess.call(['python', script_green2], stdout=sys.stdout, stderr=subprocess.STDOUT)\n\t\t\tprint(\"ROBOT projecting green 2\")\n\t\t\ttime.sleep(5)\n\t\t\treturn 'grasp'\n\n#################END UR5e ARM CODE #######################################\n\n\n\tdef run(self):\n\n\t\tglobal current_table_number, count\n\t\t#Initialize belief (randomly select states)\n\t\tb = np.ones(len(self.model.states))/(len(self.model.states)-1)\n\t\tb[-1]=0.0\n\n\t\tprint (b)\n\n\t\tterm=False\n\t\treset = False\n\t\tstate= np.random.choice(self.model.states[:-1])  # do not sample term\n\n\t\twhile not term:\n\t\t\ta_idx=self.policy.select_action(b)\n\n\t\t\ts_idx = self.model.states.index(state)\n\t\t\tprint ('\\n\\n\\nUnderlying state: ', state)\n\t\t\tprint ('action is: ',self.model.actions[a_idx])\n\t\t\tcurrent_action = self.model.actions[a_idx]\n\n\n\t\t\tnext_state = np.random.choice(self.model.states, p=self.model.trans_mat[a_idx,s_idx,:])\n\t\t\tobs = self.observe(a_idx,next_state)\n\t\t\tprint(\"Next state\", next_state)\n\t\t\tprint(obs)\n\t\t\tif 'grasp' in obs:\n\t\t\t\tcount += 1\n\t\t\tif count >=3:\n\t\t\t\tsys.exit()\n\n\n\t\t\tif next_state == \"terminal\":\n\t\t\t\t#dialogue_confirmation = hear_confirmation()\n\t\t\t\tdialogue_confirmation = \"yes\"\n\t\t\t\tif(dialogue_confirmation == \"yes\"):\n\t\t\t\t\tterm = True\n\t\t\t\t\tif((current_action == \"projectred1\") or (current_action == \"projectblue1\") or (current_action == \"projectgreen1\")):\n\t\t\t\t\t\tprint(\"Going to location 1\")\n\t\t\t\t\t\tterm = False\n\t\t\t\t\t\treset = True\n\t\t\t\t\t\tcurrent_table_number = None\n\t\t\t\t\t\tinstance= Simulator()\n\t\t\t\t\t\tinstance.run()\n\t\t\t\t\telse:\n\t\t\t\t\t\tprint(\"Going to location 2\")\n\t\t\t\t\t\tterm = False\n\t\t\t\t\t\treset = True\n\t\t\t\t\t\tcurrent_table_number = None\n\t\t\t\t\t\tinstance= Simulator()\n\t\t\t\t\t\tinstance.run()\n\t\t\t\t\tcontinue\n\t\t\t\telif (dialogue_confirmation == \"no\"):\n\t\t\t\t\tprint(\"Removing last\")\n\t\t\t\t\tprojectARObject.publish(\"remove_last\")\n\t\t\t\t\tnext_state = \"\"\n\t\t\t\t\tterm = False\n\t\t\t\t\treset = True\n\t\t\t\t\tcurrent_table_number = None\n\t\t\t\t\tinstance= Simulator()\n\t\t\t\t\tinstance.run()\n\n\t\t\tif not reset:\n\t\t\t\tobs_idx = self.model.observations.index(obs)\n\t\t\t\tprint ('observation is: ',self.model.observations[obs_idx])\n\t\t\t\tb = self.update(a_idx,obs_idx,b)\n\t\t\t\tprint(b)\n\n\t\t\t\tstate = next_state\n\t\t\t\tif b[-1]>0:\n\t\t\t\t\tterm=True\n\t\t\t\t\tprint('\\n')\n\n\ndef goto_location(location,sensitivity):\n    goalReached = False\n\n    while(not goalReached):\n\n        goalReached = moveToGoal(location,sensitivity)\n        if (goalReached):\n            rospy.loginfo(\"Reached destination!\")\n\n\ndef moveToGoal(location,sensitivity):\n    global move\n    move = actionlib.SimpleActionClient(\"move_base\", MoveBaseAction)\n    while(not move.wait_for_server(rospy.Duration.from_sec(5.0))):\n            rospy.loginfo(\"Waiting for the move_base action server to come up\")\n    simplegoal = MoveBaseGoal()\n    simplegoal.target_pose.header.frame_id = \"map\"\n    simplegoal.target_pose.header.stamp = rospy.Time.now()\n    goal_location_coordinates = location.split(\",\")\n    simplegoal.target_pose.pose.position =  Point(float(goal_location_coordinates[0]),float(goal_location_coordinates[1]),0)\n    simplegoal.target_pose.pose.orientation.x = 0.0\n    simplegoal.target_pose.pose.orientation.y = 0.0\n    # if(sensitivity != 0):\n    simplegoal.target_pose.pose.orientation.z = float(goal_location_coordinates[2])\n    simplegoal.target_pose.pose.orientation.w = float(goal_location_coordinates[3])\n    # else:\n    #     simplegoal.target_pose.pose.orientation.z = 0.0\n    #     simplegoal.target_pose.pose.orientation.w = 0.0\n    rospy.loginfo(\"Sending Next goal location \")\n    move.send_goal(simplegoal)\n    pub = rospy.Publisher('/mobile_base/commands/velocity', Twist, queue_size=10)\n    msg = Twist()\n    speed = 0.1\n    msg.linear.x = speed\n    pub.publish(msg)\n\n    move.wait_for_result(rospy.Duration(60))\n    if(move.get_state() ==  GoalStatus.SUCCEEDED):\n        rospy.loginfo(\"This is the end of navigation\")\n        return True\n\n    else:\n        rospy.loginfo(\"The robot failed to reach the destination\")\n        return False\n\n\ndef getTableGaze(data):\n\tglobal current_table_number\n\tcurrent_table_number = str(data.data)\n\n\ndef main():\n\tinstance= Simulator()\n\tinstance.run()\n\tprint(\"Complete\")\n\n\n\nif __name__ == '__main__':\n\n\ttry:\n\t\trospy.init_node('simulatortest')\n\t\trate = rospy.Rate(10) # 1hz\n\t\tprojectARObject = rospy.Publisher('object_to_project', String, queue_size=10)\n\t\trospy.Subscriber(\"/gaze_table\", String, getTableGaze)\n\t\tmain()\n\t\t# rospy.spin()\n\n\texcept rospy.ROSInterruptException:\n\t\tprint(\"finished!\")\n",
					"file": "/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/FINALSCRIPT.py",
					"file_size": 9255,
					"file_write_time": 133386803032270734,
					"settings":
					{
						"buffer_size": 9255,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/chels/arm_observed.sh",
					"settings":
					{
						"buffer_size": 72,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/chels/Desktop/shell/wrist/arm_avoided.sh",
					"settings":
					{
						"buffer_size": 61,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/chels/start_arm.sh",
					"settings":
					{
						"buffer_size": 34,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/chels/start_gripper.sh",
					"settings":
					{
						"buffer_size": 136,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/chels/arm_avoided.sh",
				"/home/chelsea/catkin_ws_che/src/ur5_yan/scripts/pomdp/ur5_red1.py",
				"/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/ur5_red1.py",
				"/home/chels/Desktop/shell/wrist/start_arm.sh",
				"/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/utils.py",
				"/home/chels/catkin_ws/src/ur5_yan/launch/ur5_grasp.launch",
				"/home/chels/error",
				"/home/chelsea/catkin_ws_che/src/ur5_yan/scripts/pomdp/FINALSCRIPT.py",
				"/home/chelsea/start_arm.sh"
			],
			"find":
			{
				"height": 26.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"chelsea"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"chels"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 4,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/chels/catkin_ws/src/ur5_yan/scripts/pomdp/FINALSCRIPT.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 9255,
								"regions":
								{
								},
								"selection":
								[
									[
										2407,
										2407
									]
								],
								"settings":
								{
									"syntax": "Packages/Python/Python.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 1173.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/chels/arm_observed.sh",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 72,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Bash.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/chels/Desktop/shell/wrist/arm_avoided.sh",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 61,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Bash.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/chels/start_arm.sh",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 34,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Bash.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/chels/start_gripper.sh",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 136,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Bash.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 26.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,1,0,0,0,0,0,0,0,1920,1080",
			"project": "",
			"replace":
			{
				"height": 48.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 1,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
