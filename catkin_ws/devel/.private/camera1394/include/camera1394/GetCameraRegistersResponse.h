// Generated by gencpp from file camera1394/GetCameraRegistersResponse.msg
// DO NOT EDIT!


#ifndef CAMERA1394_MESSAGE_GETCAMERAREGISTERSRESPONSE_H
#define CAMERA1394_MESSAGE_GETCAMERAREGISTERSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera1394
{
template <class ContainerAllocator>
struct GetCameraRegistersResponse_
{
  typedef GetCameraRegistersResponse_<ContainerAllocator> Type;

  GetCameraRegistersResponse_()
    : value()  {
    }
  GetCameraRegistersResponse_(const ContainerAllocator& _alloc)
    : value(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetCameraRegistersResponse_

typedef ::camera1394::GetCameraRegistersResponse_<std::allocator<void> > GetCameraRegistersResponse;

typedef boost::shared_ptr< ::camera1394::GetCameraRegistersResponse > GetCameraRegistersResponsePtr;
typedef boost::shared_ptr< ::camera1394::GetCameraRegistersResponse const> GetCameraRegistersResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator1> & lhs, const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator1> & lhs, const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera1394

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4680a08e992f8f11add4bc58e31c78a7";
  }

  static const char* value(const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4680a08e992f8f11ULL;
  static const uint64_t static_value2 = 0xadd4bc58e31c78a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera1394/GetCameraRegistersResponse";
  }

  static const char* value(const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Value of the register\n"
"uint32[] value\n"
"\n"
;
  }

  static const char* value(const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCameraRegistersResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera1394::GetCameraRegistersResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera1394::GetCameraRegistersResponse_<ContainerAllocator>& v)
  {
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA1394_MESSAGE_GETCAMERAREGISTERSRESPONSE_H
