// Generated by gencpp from file camera1394/SetCameraRegistersRequest.msg
// DO NOT EDIT!


#ifndef CAMERA1394_MESSAGE_SETCAMERAREGISTERSREQUEST_H
#define CAMERA1394_MESSAGE_SETCAMERAREGISTERSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera1394
{
template <class ContainerAllocator>
struct SetCameraRegistersRequest_
{
  typedef SetCameraRegistersRequest_<ContainerAllocator> Type;

  SetCameraRegistersRequest_()
    : type(0)
    , offset(0)
    , value()
    , mode(0)  {
    }
  SetCameraRegistersRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , offset(0)
    , value(_alloc)
    , mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint64_t _offset_type;
  _offset_type offset;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _value_type;
  _value_type value;

   typedef uint32_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_CONTROL)
  #undef TYPE_CONTROL
#endif
#if defined(_WIN32) && defined(TYPE_ABSOLUTE)
  #undef TYPE_ABSOLUTE
#endif
#if defined(_WIN32) && defined(TYPE_FORMAT7)
  #undef TYPE_FORMAT7
#endif
#if defined(_WIN32) && defined(TYPE_ADVANCED_CONTROL)
  #undef TYPE_ADVANCED_CONTROL
#endif
#if defined(_WIN32) && defined(TYPE_PIO)
  #undef TYPE_PIO
#endif
#if defined(_WIN32) && defined(TYPE_SIO)
  #undef TYPE_SIO
#endif
#if defined(_WIN32) && defined(TYPE_STROBE)
  #undef TYPE_STROBE
#endif

  enum {
    TYPE_CONTROL = 0u,
    TYPE_ABSOLUTE = 1u,
    TYPE_FORMAT7 = 2u,
    TYPE_ADVANCED_CONTROL = 3u,
    TYPE_PIO = 4u,
    TYPE_SIO = 5u,
    TYPE_STROBE = 6u,
  };


  typedef boost::shared_ptr< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetCameraRegistersRequest_

typedef ::camera1394::SetCameraRegistersRequest_<std::allocator<void> > SetCameraRegistersRequest;

typedef boost::shared_ptr< ::camera1394::SetCameraRegistersRequest > SetCameraRegistersRequestPtr;
typedef boost::shared_ptr< ::camera1394::SetCameraRegistersRequest const> SetCameraRegistersRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator1> & lhs, const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.offset == rhs.offset &&
    lhs.value == rhs.value &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator1> & lhs, const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera1394

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "703211788a5d6f08f820dfb1792ab51c";
  }

  static const char* value(const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x703211788a5d6f08ULL;
  static const uint64_t static_value2 = 0xf820dfb1792ab51cULL;
};

template<class ContainerAllocator>
struct DataType< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera1394/SetCameraRegistersRequest";
  }

  static const char* value(const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Control and status register (CSR) types\n"
"uint8 TYPE_CONTROL=0\n"
"uint8 TYPE_ABSOLUTE=1\n"
"uint8 TYPE_FORMAT7=2\n"
"uint8 TYPE_ADVANCED_CONTROL=3\n"
"uint8 TYPE_PIO=4\n"
"uint8 TYPE_SIO=5\n"
"uint8 TYPE_STROBE=6\n"
"# Register type; defaults to 0.\n"
"uint8 type\n"
"# Register offset\n"
"uint64 offset\n"
"# Value to set; call with an empty value succeed without any effect.\n"
"uint32[] value\n"
"# Mode for Format7 register, feature for absolute register; otherwise it does not apply.\n"
"uint32 mode\n"
;
  }

  static const char* value(const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.offset);
      stream.next(m.value);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCameraRegistersRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera1394::SetCameraRegistersRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera1394::SetCameraRegistersRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "offset: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.offset);
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.value[i]);
    }
    s << indent << "mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA1394_MESSAGE_SETCAMERAREGISTERSREQUEST_H
