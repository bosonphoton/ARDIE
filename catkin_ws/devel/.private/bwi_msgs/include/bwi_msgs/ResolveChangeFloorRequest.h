// Generated by gencpp from file bwi_msgs/ResolveChangeFloorRequest.msg
// DO NOT EDIT!


#ifndef BWI_MSGS_MESSAGE_RESOLVECHANGEFLOORREQUEST_H
#define BWI_MSGS_MESSAGE_RESOLVECHANGEFLOORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bwi_msgs
{
template <class ContainerAllocator>
struct ResolveChangeFloorRequest_
{
  typedef ResolveChangeFloorRequest_<ContainerAllocator> Type;

  ResolveChangeFloorRequest_()
    : new_room()
    , facing_door()  {
    }
  ResolveChangeFloorRequest_(const ContainerAllocator& _alloc)
    : new_room(_alloc)
    , facing_door(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _new_room_type;
  _new_room_type new_room;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _facing_door_type;
  _facing_door_type facing_door;





  typedef boost::shared_ptr< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResolveChangeFloorRequest_

typedef ::bwi_msgs::ResolveChangeFloorRequest_<std::allocator<void> > ResolveChangeFloorRequest;

typedef boost::shared_ptr< ::bwi_msgs::ResolveChangeFloorRequest > ResolveChangeFloorRequestPtr;
typedef boost::shared_ptr< ::bwi_msgs::ResolveChangeFloorRequest const> ResolveChangeFloorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator1> & lhs, const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.new_room == rhs.new_room &&
    lhs.facing_door == rhs.facing_door;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator1> & lhs, const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bwi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "772ff4012bb9fe3f3b88e0eae51cb09a";
  }

  static const char* value(const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x772ff4012bb9fe3fULL;
  static const uint64_t static_value2 = 0x3b88e0eae51cb09aULL;
};

template<class ContainerAllocator>
struct DataType< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_msgs/ResolveChangeFloorRequest";
  }

  static const char* value(const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string new_room\n"
"string facing_door\n"
;
  }

  static const char* value(const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.new_room);
      stream.next(m.facing_door);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResolveChangeFloorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bwi_msgs::ResolveChangeFloorRequest_<ContainerAllocator>& v)
  {
    s << indent << "new_room: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.new_room);
    s << indent << "facing_door: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.facing_door);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BWI_MSGS_MESSAGE_RESOLVECHANGEFLOORREQUEST_H
