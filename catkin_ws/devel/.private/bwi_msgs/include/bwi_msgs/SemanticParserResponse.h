// Generated by gencpp from file bwi_msgs/SemanticParserResponse.msg
// DO NOT EDIT!


#ifndef BWI_MSGS_MESSAGE_SEMANTICPARSERRESPONSE_H
#define BWI_MSGS_MESSAGE_SEMANTICPARSERRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bwi_msgs
{
template <class ContainerAllocator>
struct SemanticParserResponse_
{
  typedef SemanticParserResponse_<ContainerAllocator> Type;

  SemanticParserResponse_()
    : output_text()
    , query()  {
    }
  SemanticParserResponse_(const ContainerAllocator& _alloc)
    : output_text(_alloc)
    , query(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _output_text_type;
  _output_text_type output_text;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _query_type;
  _query_type query;





  typedef boost::shared_ptr< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SemanticParserResponse_

typedef ::bwi_msgs::SemanticParserResponse_<std::allocator<void> > SemanticParserResponse;

typedef boost::shared_ptr< ::bwi_msgs::SemanticParserResponse > SemanticParserResponsePtr;
typedef boost::shared_ptr< ::bwi_msgs::SemanticParserResponse const> SemanticParserResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator1> & lhs, const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output_text == rhs.output_text &&
    lhs.query == rhs.query;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator1> & lhs, const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bwi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4df998ea60985a7aee13f78acfd30180";
  }

  static const char* value(const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4df998ea60985a7aULL;
  static const uint64_t static_value2 = 0xee13f78acfd30180ULL;
};

template<class ContainerAllocator>
struct DataType< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_msgs/SemanticParserResponse";
  }

  static const char* value(const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string output_text\n"
"string query\n"
"\n"
;
  }

  static const char* value(const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output_text);
      stream.next(m.query);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SemanticParserResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bwi_msgs::SemanticParserResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bwi_msgs::SemanticParserResponse_<ContainerAllocator>& v)
  {
    s << indent << "output_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.output_text);
    s << indent << "query: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.query);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BWI_MSGS_MESSAGE_SEMANTICPARSERRESPONSE_H
