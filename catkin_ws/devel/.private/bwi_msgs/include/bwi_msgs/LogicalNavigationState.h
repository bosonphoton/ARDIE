// Generated by gencpp from file bwi_msgs/LogicalNavigationState.msg
// DO NOT EDIT!


#ifndef BWI_MSGS_MESSAGE_LOGICALNAVIGATIONSTATE_H
#define BWI_MSGS_MESSAGE_LOGICALNAVIGATIONSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bwi_msgs
{
template <class ContainerAllocator>
struct LogicalNavigationState_
{
  typedef LogicalNavigationState_<ContainerAllocator> Type;

  LogicalNavigationState_()
    : room()
    , nearby_locations()
    , facing()  {
    }
  LogicalNavigationState_(const ContainerAllocator& _alloc)
    : room(_alloc)
    , nearby_locations(_alloc)
    , facing(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _room_type;
  _room_type room;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _nearby_locations_type;
  _nearby_locations_type nearby_locations;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _facing_type;
  _facing_type facing;





  typedef boost::shared_ptr< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> const> ConstPtr;

}; // struct LogicalNavigationState_

typedef ::bwi_msgs::LogicalNavigationState_<std::allocator<void> > LogicalNavigationState;

typedef boost::shared_ptr< ::bwi_msgs::LogicalNavigationState > LogicalNavigationStatePtr;
typedef boost::shared_ptr< ::bwi_msgs::LogicalNavigationState const> LogicalNavigationStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator1> & lhs, const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator2> & rhs)
{
  return lhs.room == rhs.room &&
    lhs.nearby_locations == rhs.nearby_locations &&
    lhs.facing == rhs.facing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator1> & lhs, const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bwi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61b5fec880100a091a9019844c6c5b20";
  }

  static const char* value(const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61b5fec880100a09ULL;
  static const uint64_t static_value2 = 0x1a9019844c6c5b20ULL;
};

template<class ContainerAllocator>
struct DataType< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_msgs/LogicalNavigationState";
  }

  static const char* value(const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string room\n"
"string[] nearby_locations\n"
"bool[] facing\n"
;
  }

  static const char* value(const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.room);
      stream.next(m.nearby_locations);
      stream.next(m.facing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LogicalNavigationState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bwi_msgs::LogicalNavigationState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bwi_msgs::LogicalNavigationState_<ContainerAllocator>& v)
  {
    s << indent << "room: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.room);
    s << indent << "nearby_locations[]" << std::endl;
    for (size_t i = 0; i < v.nearby_locations.size(); ++i)
    {
      s << indent << "  nearby_locations[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.nearby_locations[i]);
    }
    s << indent << "facing[]" << std::endl;
    for (size_t i = 0; i < v.facing.size(); ++i)
    {
      s << indent << "  facing[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.facing[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BWI_MSGS_MESSAGE_LOGICALNAVIGATIONSTATE_H
