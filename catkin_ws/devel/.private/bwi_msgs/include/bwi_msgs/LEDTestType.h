// Generated by gencpp from file bwi_msgs/LEDTestType.msg
// DO NOT EDIT!


#ifndef BWI_MSGS_MESSAGE_LEDTESTTYPE_H
#define BWI_MSGS_MESSAGE_LEDTESTTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bwi_msgs
{
template <class ContainerAllocator>
struct LEDTestType_
{
  typedef LEDTestType_<ContainerAllocator> Type;

  LEDTestType_()
    : test_type(0)  {
    }
  LEDTestType_(const ContainerAllocator& _alloc)
    : test_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _test_type_type;
  _test_type_type test_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SET_EVERY_FIFTH)
  #undef SET_EVERY_FIFTH
#endif
#if defined(_WIN32) && defined(SET_FIRST_FIVE)
  #undef SET_FIRST_FIVE
#endif
#if defined(_WIN32) && defined(TEST_STRIP)
  #undef TEST_STRIP
#endif

  enum {
    SET_EVERY_FIFTH = 1u,
    SET_FIRST_FIVE = 2u,
    TEST_STRIP = 3u,
  };


  typedef boost::shared_ptr< ::bwi_msgs::LEDTestType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bwi_msgs::LEDTestType_<ContainerAllocator> const> ConstPtr;

}; // struct LEDTestType_

typedef ::bwi_msgs::LEDTestType_<std::allocator<void> > LEDTestType;

typedef boost::shared_ptr< ::bwi_msgs::LEDTestType > LEDTestTypePtr;
typedef boost::shared_ptr< ::bwi_msgs::LEDTestType const> LEDTestTypeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bwi_msgs::LEDTestType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bwi_msgs::LEDTestType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bwi_msgs::LEDTestType_<ContainerAllocator1> & lhs, const ::bwi_msgs::LEDTestType_<ContainerAllocator2> & rhs)
{
  return lhs.test_type == rhs.test_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bwi_msgs::LEDTestType_<ContainerAllocator1> & lhs, const ::bwi_msgs::LEDTestType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bwi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::LEDTestType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::LEDTestType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::LEDTestType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::LEDTestType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::LEDTestType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::LEDTestType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bwi_msgs::LEDTestType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7319100562ff4b6eeae3f766074dac4b";
  }

  static const char* value(const ::bwi_msgs::LEDTestType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7319100562ff4b6eULL;
  static const uint64_t static_value2 = 0xeae3f766074dac4bULL;
};

template<class ContainerAllocator>
struct DataType< ::bwi_msgs::LEDTestType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_msgs/LEDTestType";
  }

  static const char* value(const ::bwi_msgs::LEDTestType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bwi_msgs::LEDTestType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# LED Test Type\n"
"\n"
"# Service Variables\n"
"uint8 SET_EVERY_FIFTH = 1\n"
"uint8 SET_FIRST_FIVE = 2\n"
"uint8 TEST_STRIP = 3\n"
"\n"
"# Selects which animation to execute\n"
"\n"
"uint8 test_type\n"
;
  }

  static const char* value(const ::bwi_msgs::LEDTestType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bwi_msgs::LEDTestType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.test_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LEDTestType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bwi_msgs::LEDTestType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bwi_msgs::LEDTestType_<ContainerAllocator>& v)
  {
    s << indent << "test_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.test_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BWI_MSGS_MESSAGE_LEDTESTTYPE_H
