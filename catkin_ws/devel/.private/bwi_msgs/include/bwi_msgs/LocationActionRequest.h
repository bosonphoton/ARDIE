// Generated by gencpp from file bwi_msgs/LocationActionRequest.msg
// DO NOT EDIT!


#ifndef BWI_MSGS_MESSAGE_LOCATIONACTIONREQUEST_H
#define BWI_MSGS_MESSAGE_LOCATIONACTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <bwi_msgs/WeekTime.h>

namespace bwi_msgs
{
template <class ContainerAllocator>
struct LocationActionRequest_
{
  typedef LocationActionRequest_<ContainerAllocator> Type;

  LocationActionRequest_()
    : time()
    , current_location()  {
    }
  LocationActionRequest_(const ContainerAllocator& _alloc)
    : time(_alloc)
    , current_location(_alloc)  {
  (void)_alloc;
    }



   typedef  ::bwi_msgs::WeekTime_<ContainerAllocator>  _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _current_location_type;
  _current_location_type current_location;





  typedef boost::shared_ptr< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LocationActionRequest_

typedef ::bwi_msgs::LocationActionRequest_<std::allocator<void> > LocationActionRequest;

typedef boost::shared_ptr< ::bwi_msgs::LocationActionRequest > LocationActionRequestPtr;
typedef boost::shared_ptr< ::bwi_msgs::LocationActionRequest const> LocationActionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bwi_msgs::LocationActionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bwi_msgs::LocationActionRequest_<ContainerAllocator1> & lhs, const ::bwi_msgs::LocationActionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.current_location == rhs.current_location;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bwi_msgs::LocationActionRequest_<ContainerAllocator1> & lhs, const ::bwi_msgs::LocationActionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bwi_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd81ec9218c952a0d599ebee244c83e8";
  }

  static const char* value(const ::bwi_msgs::LocationActionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd81ec9218c952a0ULL;
  static const uint64_t static_value2 = 0xd599ebee244c83e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_msgs/LocationActionRequest";
  }

  static const char* value(const ::bwi_msgs::LocationActionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_msgs/WeekTime time\n"
"string current_location\n"
"\n"
"================================================================================\n"
"MSG: bwi_msgs/WeekTime\n"
"# Constants defining day of week\n"
"int32 MONDAY=0\n"
"int32 TUESDAY=1\n"
"int32 WEDNESDAY=2\n"
"int32 THURSDAY=3\n"
"int32 FRIDAY=4\n"
"int32 SATURDAY=5\n"
"int32 SUNDAY=6\n"
"\n"
"int32 time_seconds\n"
"int32 day_of_week\n"
;
  }

  static const char* value(const ::bwi_msgs::LocationActionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.current_location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocationActionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bwi_msgs::LocationActionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bwi_msgs::LocationActionRequest_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    s << std::endl;
    Printer< ::bwi_msgs::WeekTime_<ContainerAllocator> >::stream(s, indent + "  ", v.time);
    s << indent << "current_location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.current_location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BWI_MSGS_MESSAGE_LOCATIONACTIONREQUEST_H
