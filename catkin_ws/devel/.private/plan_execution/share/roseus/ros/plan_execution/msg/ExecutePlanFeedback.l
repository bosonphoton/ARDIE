;; Auto-generated. Do not edit!


(when (boundp 'plan_execution::ExecutePlanFeedback)
  (if (not (find-package "PLAN_EXECUTION"))
    (make-package "PLAN_EXECUTION"))
  (shadow 'ExecutePlanFeedback (find-package "PLAN_EXECUTION")))
(unless (find-package "PLAN_EXECUTION::EXECUTEPLANFEEDBACK")
  (make-package "PLAN_EXECUTION::EXECUTEPLANFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude ExecutePlanFeedback.msg.html


(intern "*PLAN_CHANGED_EVENT*" (find-package "PLAN_EXECUTION::EXECUTEPLANFEEDBACK"))
(shadow '*PLAN_CHANGED_EVENT* (find-package "PLAN_EXECUTION::EXECUTEPLANFEEDBACK"))
(defconstant plan_execution::ExecutePlanFeedback::*PLAN_CHANGED_EVENT* 1)
(intern "*ACTION_STARTED_EVENT*" (find-package "PLAN_EXECUTION::EXECUTEPLANFEEDBACK"))
(shadow '*ACTION_STARTED_EVENT* (find-package "PLAN_EXECUTION::EXECUTEPLANFEEDBACK"))
(defconstant plan_execution::ExecutePlanFeedback::*ACTION_STARTED_EVENT* 2)
(intern "*ACTION_ENDED_EVENT*" (find-package "PLAN_EXECUTION::EXECUTEPLANFEEDBACK"))
(shadow '*ACTION_ENDED_EVENT* (find-package "PLAN_EXECUTION::EXECUTEPLANFEEDBACK"))
(defconstant plan_execution::ExecutePlanFeedback::*ACTION_ENDED_EVENT* 3)
(defclass plan_execution::ExecutePlanFeedback
  :super ros::object
  :slots (_event_type _plan ))

(defmethod plan_execution::ExecutePlanFeedback
  (:init
   (&key
    ((:event_type __event_type) 0)
    ((:plan __plan) (let (r) (dotimes (i 0) (push (instance plan_execution::AspFluent :init) r)) r))
    )
   (send-super :init)
   (setq _event_type (round __event_type))
   (setq _plan __plan)
   self)
  (:event_type
   (&optional __event_type)
   (if __event_type (setq _event_type __event_type)) _event_type)
  (:plan
   (&rest __plan)
   (if (keywordp (car __plan))
       (send* _plan __plan)
     (progn
       (if __plan (setq _plan (car __plan)))
       _plan)))
  (:serialization-length
   ()
   (+
    ;; int32 _event_type
    4
    ;; plan_execution/AspFluent[] _plan
    (apply #'+ (send-all _plan :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _event_type
       (write-long _event_type s)
     ;; plan_execution/AspFluent[] _plan
     (write-long (length _plan) s)
     (dolist (elem _plan)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _event_type
     (setq _event_type (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; plan_execution/AspFluent[] _plan
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _plan (let (r) (dotimes (i n) (push (instance plan_execution::AspFluent :init) r)) r))
     (dolist (elem- _plan)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get plan_execution::ExecutePlanFeedback :md5sum-) "94ff676cd2eeea6adc43ba9737fa2e30")
(setf (get plan_execution::ExecutePlanFeedback :datatype-) "plan_execution/ExecutePlanFeedback")
(setf (get plan_execution::ExecutePlanFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int32 PLAN_CHANGED_EVENT = 1
int32 ACTION_STARTED_EVENT = 2
int32 ACTION_ENDED_EVENT = 3
int32 event_type
AspFluent[] plan


================================================================================
MSG: plan_execution/AspFluent
string name
string[] variables
uint32 timeStep

")



(provide :plan_execution/ExecutePlanFeedback "94ff676cd2eeea6adc43ba9737fa2e30")


