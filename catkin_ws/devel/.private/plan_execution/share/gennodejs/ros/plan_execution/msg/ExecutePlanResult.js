// Auto-generated. Do not edit!

// (in-package plan_execution.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let AspFluent = require('./AspFluent.js');
let AspRule = require('./AspRule.js');

//-----------------------------------------------------------

class ExecutePlanResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.status = null;
      this.final_action = null;
      this.plan_remainder = null;
      this.inconsistent_rules = null;
      this.message = null;
    }
    else {
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = 0;
      }
      if (initObj.hasOwnProperty('final_action')) {
        this.final_action = initObj.final_action
      }
      else {
        this.final_action = new AspFluent();
      }
      if (initObj.hasOwnProperty('plan_remainder')) {
        this.plan_remainder = initObj.plan_remainder
      }
      else {
        this.plan_remainder = [];
      }
      if (initObj.hasOwnProperty('inconsistent_rules')) {
        this.inconsistent_rules = initObj.inconsistent_rules
      }
      else {
        this.inconsistent_rules = [];
      }
      if (initObj.hasOwnProperty('message')) {
        this.message = initObj.message
      }
      else {
        this.message = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ExecutePlanResult
    // Serialize message field [status]
    bufferOffset = _serializer.int32(obj.status, buffer, bufferOffset);
    // Serialize message field [final_action]
    bufferOffset = AspFluent.serialize(obj.final_action, buffer, bufferOffset);
    // Serialize message field [plan_remainder]
    // Serialize the length for message field [plan_remainder]
    bufferOffset = _serializer.uint32(obj.plan_remainder.length, buffer, bufferOffset);
    obj.plan_remainder.forEach((val) => {
      bufferOffset = AspFluent.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [inconsistent_rules]
    // Serialize the length for message field [inconsistent_rules]
    bufferOffset = _serializer.uint32(obj.inconsistent_rules.length, buffer, bufferOffset);
    obj.inconsistent_rules.forEach((val) => {
      bufferOffset = AspRule.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [message]
    bufferOffset = _serializer.string(obj.message, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ExecutePlanResult
    let len;
    let data = new ExecutePlanResult(null);
    // Deserialize message field [status]
    data.status = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [final_action]
    data.final_action = AspFluent.deserialize(buffer, bufferOffset);
    // Deserialize message field [plan_remainder]
    // Deserialize array length for message field [plan_remainder]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.plan_remainder = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.plan_remainder[i] = AspFluent.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [inconsistent_rules]
    // Deserialize array length for message field [inconsistent_rules]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.inconsistent_rules = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.inconsistent_rules[i] = AspRule.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [message]
    data.message = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += AspFluent.getMessageSize(object.final_action);
    object.plan_remainder.forEach((val) => {
      length += AspFluent.getMessageSize(val);
    });
    object.inconsistent_rules.forEach((val) => {
      length += AspRule.getMessageSize(val);
    });
    length += object.message.length;
    return length + 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'plan_execution/ExecutePlanResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '80745bbaf00d0889663923066dad51c0';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    int32 SUCCEEDED = 1
    int32 FAILED_TO_PLAN = 2
    int32 TOO_MANY_ACTION_FAILURES = 3
    int32 status
    AspFluent final_action
    AspFluent[] plan_remainder
    AspRule[] inconsistent_rules
    string message
    
    ================================================================================
    MSG: plan_execution/AspFluent
    string name
    string[] variables
    uint32 timeStep
    
    ================================================================================
    MSG: plan_execution/AspRule
    AspFluent[] head
    AspFluent[] body
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ExecutePlanResult(null);
    if (msg.status !== undefined) {
      resolved.status = msg.status;
    }
    else {
      resolved.status = 0
    }

    if (msg.final_action !== undefined) {
      resolved.final_action = AspFluent.Resolve(msg.final_action)
    }
    else {
      resolved.final_action = new AspFluent()
    }

    if (msg.plan_remainder !== undefined) {
      resolved.plan_remainder = new Array(msg.plan_remainder.length);
      for (let i = 0; i < resolved.plan_remainder.length; ++i) {
        resolved.plan_remainder[i] = AspFluent.Resolve(msg.plan_remainder[i]);
      }
    }
    else {
      resolved.plan_remainder = []
    }

    if (msg.inconsistent_rules !== undefined) {
      resolved.inconsistent_rules = new Array(msg.inconsistent_rules.length);
      for (let i = 0; i < resolved.inconsistent_rules.length; ++i) {
        resolved.inconsistent_rules[i] = AspRule.Resolve(msg.inconsistent_rules[i]);
      }
    }
    else {
      resolved.inconsistent_rules = []
    }

    if (msg.message !== undefined) {
      resolved.message = msg.message;
    }
    else {
      resolved.message = ''
    }

    return resolved;
    }
};

// Constants for message
ExecutePlanResult.Constants = {
  SUCCEEDED: 1,
  FAILED_TO_PLAN: 2,
  TOO_MANY_ACTION_FAILURES: 3,
}

module.exports = ExecutePlanResult;
