// Generated by gencpp from file plan_execution/GetHriMessageRequest.msg
// DO NOT EDIT!


#ifndef PLAN_EXECUTION_MESSAGE_GETHRIMESSAGEREQUEST_H
#define PLAN_EXECUTION_MESSAGE_GETHRIMESSAGEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_execution
{
template <class ContainerAllocator>
struct GetHriMessageRequest_
{
  typedef GetHriMessageRequest_<ContainerAllocator> Type;

  GetHriMessageRequest_()
    : message_id()  {
    }
  GetHriMessageRequest_(const ContainerAllocator& _alloc)
    : message_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_id_type;
  _message_id_type message_id;





  typedef boost::shared_ptr< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetHriMessageRequest_

typedef ::plan_execution::GetHriMessageRequest_<std::allocator<void> > GetHriMessageRequest;

typedef boost::shared_ptr< ::plan_execution::GetHriMessageRequest > GetHriMessageRequestPtr;
typedef boost::shared_ptr< ::plan_execution::GetHriMessageRequest const> GetHriMessageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_execution::GetHriMessageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_execution::GetHriMessageRequest_<ContainerAllocator1> & lhs, const ::plan_execution::GetHriMessageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.message_id == rhs.message_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_execution::GetHriMessageRequest_<ContainerAllocator1> & lhs, const ::plan_execution::GetHriMessageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_execution

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2aed9f8b65b71345d61f344a1818944b";
  }

  static const char* value(const ::plan_execution::GetHriMessageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2aed9f8b65b71345ULL;
  static const uint64_t static_value2 = 0xd61f344a1818944bULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_execution/GetHriMessageRequest";
  }

  static const char* value(const ::plan_execution::GetHriMessageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string message_id\n"
;
  }

  static const char* value(const ::plan_execution::GetHriMessageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetHriMessageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_execution::GetHriMessageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_execution::GetHriMessageRequest_<ContainerAllocator>& v)
  {
    s << indent << "message_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_EXECUTION_MESSAGE_GETHRIMESSAGEREQUEST_H
