// Generated by gencpp from file plan_execution/ExecutePlanResult.msg
// DO NOT EDIT!


#ifndef PLAN_EXECUTION_MESSAGE_EXECUTEPLANRESULT_H
#define PLAN_EXECUTION_MESSAGE_EXECUTEPLANRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <plan_execution/AspFluent.h>
#include <plan_execution/AspFluent.h>
#include <plan_execution/AspRule.h>

namespace plan_execution
{
template <class ContainerAllocator>
struct ExecutePlanResult_
{
  typedef ExecutePlanResult_<ContainerAllocator> Type;

  ExecutePlanResult_()
    : status(0)
    , final_action()
    , plan_remainder()
    , inconsistent_rules()
    , message()  {
    }
  ExecutePlanResult_(const ContainerAllocator& _alloc)
    : status(0)
    , final_action(_alloc)
    , plan_remainder(_alloc)
    , inconsistent_rules(_alloc)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _status_type;
  _status_type status;

   typedef  ::plan_execution::AspFluent_<ContainerAllocator>  _final_action_type;
  _final_action_type final_action;

   typedef std::vector< ::plan_execution::AspFluent_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::plan_execution::AspFluent_<ContainerAllocator> >> _plan_remainder_type;
  _plan_remainder_type plan_remainder;

   typedef std::vector< ::plan_execution::AspRule_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::plan_execution::AspRule_<ContainerAllocator> >> _inconsistent_rules_type;
  _inconsistent_rules_type inconsistent_rules;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCEEDED)
  #undef SUCCEEDED
#endif
#if defined(_WIN32) && defined(FAILED_TO_PLAN)
  #undef FAILED_TO_PLAN
#endif
#if defined(_WIN32) && defined(TOO_MANY_ACTION_FAILURES)
  #undef TOO_MANY_ACTION_FAILURES
#endif

  enum {
    SUCCEEDED = 1,
    FAILED_TO_PLAN = 2,
    TOO_MANY_ACTION_FAILURES = 3,
  };


  typedef boost::shared_ptr< ::plan_execution::ExecutePlanResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_execution::ExecutePlanResult_<ContainerAllocator> const> ConstPtr;

}; // struct ExecutePlanResult_

typedef ::plan_execution::ExecutePlanResult_<std::allocator<void> > ExecutePlanResult;

typedef boost::shared_ptr< ::plan_execution::ExecutePlanResult > ExecutePlanResultPtr;
typedef boost::shared_ptr< ::plan_execution::ExecutePlanResult const> ExecutePlanResultConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_execution::ExecutePlanResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_execution::ExecutePlanResult_<ContainerAllocator1> & lhs, const ::plan_execution::ExecutePlanResult_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.final_action == rhs.final_action &&
    lhs.plan_remainder == rhs.plan_remainder &&
    lhs.inconsistent_rules == rhs.inconsistent_rules &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_execution::ExecutePlanResult_<ContainerAllocator1> & lhs, const ::plan_execution::ExecutePlanResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_execution

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_execution::ExecutePlanResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_execution::ExecutePlanResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_execution::ExecutePlanResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80745bbaf00d0889663923066dad51c0";
  }

  static const char* value(const ::plan_execution::ExecutePlanResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80745bbaf00d0889ULL;
  static const uint64_t static_value2 = 0x663923066dad51c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_execution/ExecutePlanResult";
  }

  static const char* value(const ::plan_execution::ExecutePlanResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32 SUCCEEDED = 1\n"
"int32 FAILED_TO_PLAN = 2\n"
"int32 TOO_MANY_ACTION_FAILURES = 3\n"
"int32 status\n"
"AspFluent final_action\n"
"AspFluent[] plan_remainder\n"
"AspRule[] inconsistent_rules\n"
"string message\n"
"\n"
"================================================================================\n"
"MSG: plan_execution/AspFluent\n"
"string name\n"
"string[] variables\n"
"uint32 timeStep\n"
"\n"
"================================================================================\n"
"MSG: plan_execution/AspRule\n"
"AspFluent[] head\n"
"AspFluent[] body\n"
;
  }

  static const char* value(const ::plan_execution::ExecutePlanResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.final_action);
      stream.next(m.plan_remainder);
      stream.next(m.inconsistent_rules);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecutePlanResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_execution::ExecutePlanResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_execution::ExecutePlanResult_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "final_action: ";
    s << std::endl;
    Printer< ::plan_execution::AspFluent_<ContainerAllocator> >::stream(s, indent + "  ", v.final_action);
    s << indent << "plan_remainder[]" << std::endl;
    for (size_t i = 0; i < v.plan_remainder.size(); ++i)
    {
      s << indent << "  plan_remainder[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::plan_execution::AspFluent_<ContainerAllocator> >::stream(s, indent + "    ", v.plan_remainder[i]);
    }
    s << indent << "inconsistent_rules[]" << std::endl;
    for (size_t i = 0; i < v.inconsistent_rules.size(); ++i)
    {
      s << indent << "  inconsistent_rules[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::plan_execution::AspRule_<ContainerAllocator> >::stream(s, indent + "    ", v.inconsistent_rules[i]);
    }
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_EXECUTION_MESSAGE_EXECUTEPLANRESULT_H
