// Generated by gencpp from file plan_execution/IsPlanValidRequest.msg
// DO NOT EDIT!


#ifndef PLAN_EXECUTION_MESSAGE_ISPLANVALIDREQUEST_H
#define PLAN_EXECUTION_MESSAGE_ISPLANVALIDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <plan_execution/AnswerSet.h>
#include <plan_execution/AspRule.h>

namespace plan_execution
{
template <class ContainerAllocator>
struct IsPlanValidRequest_
{
  typedef IsPlanValidRequest_<ContainerAllocator> Type;

  IsPlanValidRequest_()
    : plan()
    , goal()  {
    }
  IsPlanValidRequest_(const ContainerAllocator& _alloc)
    : plan(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::plan_execution::AnswerSet_<ContainerAllocator>  _plan_type;
  _plan_type plan;

   typedef std::vector< ::plan_execution::AspRule_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::plan_execution::AspRule_<ContainerAllocator> >> _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IsPlanValidRequest_

typedef ::plan_execution::IsPlanValidRequest_<std::allocator<void> > IsPlanValidRequest;

typedef boost::shared_ptr< ::plan_execution::IsPlanValidRequest > IsPlanValidRequestPtr;
typedef boost::shared_ptr< ::plan_execution::IsPlanValidRequest const> IsPlanValidRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_execution::IsPlanValidRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_execution::IsPlanValidRequest_<ContainerAllocator1> & lhs, const ::plan_execution::IsPlanValidRequest_<ContainerAllocator2> & rhs)
{
  return lhs.plan == rhs.plan &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_execution::IsPlanValidRequest_<ContainerAllocator1> & lhs, const ::plan_execution::IsPlanValidRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_execution

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df6bb06058bbc88de7aec8eef2490a9e";
  }

  static const char* value(const ::plan_execution::IsPlanValidRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf6bb06058bbc88dULL;
  static const uint64_t static_value2 = 0xe7aec8eef2490a9eULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_execution/IsPlanValidRequest";
  }

  static const char* value(const ::plan_execution::IsPlanValidRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AnswerSet plan\n"
"AspRule[] goal\n"
"\n"
"================================================================================\n"
"MSG: plan_execution/AnswerSet\n"
"AspFluent[] fluents\n"
"bool satisfied\n"
"\n"
"================================================================================\n"
"MSG: plan_execution/AspFluent\n"
"string name\n"
"string[] variables\n"
"uint32 timeStep\n"
"\n"
"================================================================================\n"
"MSG: plan_execution/AspRule\n"
"AspFluent[] head\n"
"AspFluent[] body\n"
;
  }

  static const char* value(const ::plan_execution::IsPlanValidRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IsPlanValidRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_execution::IsPlanValidRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_execution::IsPlanValidRequest_<ContainerAllocator>& v)
  {
    s << indent << "plan: ";
    s << std::endl;
    Printer< ::plan_execution::AnswerSet_<ContainerAllocator> >::stream(s, indent + "  ", v.plan);
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::plan_execution::AspRule_<ContainerAllocator> >::stream(s, indent + "    ", v.goal[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_EXECUTION_MESSAGE_ISPLANVALIDREQUEST_H
