// Generated by gencpp from file plan_execution/HriMessage.msg
// DO NOT EDIT!


#ifndef PLAN_EXECUTION_MESSAGE_HRIMESSAGE_H
#define PLAN_EXECUTION_MESSAGE_HRIMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_execution
{
template <class ContainerAllocator>
struct HriMessage_
{
  typedef HriMessage_<ContainerAllocator> Type;

  HriMessage_()
    : id()
    , content()
    , from()
    , to()  {
    }
  HriMessage_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , content(_alloc)
    , from(_alloc)
    , to(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _content_type;
  _content_type content;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _from_type;
  _from_type from;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _to_type;
  _to_type to;





  typedef boost::shared_ptr< ::plan_execution::HriMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_execution::HriMessage_<ContainerAllocator> const> ConstPtr;

}; // struct HriMessage_

typedef ::plan_execution::HriMessage_<std::allocator<void> > HriMessage;

typedef boost::shared_ptr< ::plan_execution::HriMessage > HriMessagePtr;
typedef boost::shared_ptr< ::plan_execution::HriMessage const> HriMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_execution::HriMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_execution::HriMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_execution::HriMessage_<ContainerAllocator1> & lhs, const ::plan_execution::HriMessage_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.content == rhs.content &&
    lhs.from == rhs.from &&
    lhs.to == rhs.to;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_execution::HriMessage_<ContainerAllocator1> & lhs, const ::plan_execution::HriMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_execution

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plan_execution::HriMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_execution::HriMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_execution::HriMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_execution::HriMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_execution::HriMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_execution::HriMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_execution::HriMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4708b0c47a957a02c20845120a2f4b1c";
  }

  static const char* value(const ::plan_execution::HriMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4708b0c47a957a02ULL;
  static const uint64_t static_value2 = 0xc20845120a2f4b1cULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_execution::HriMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_execution/HriMessage";
  }

  static const char* value(const ::plan_execution::HriMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_execution::HriMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"string content\n"
"string from\n"
"string to\n"
;
  }

  static const char* value(const ::plan_execution::HriMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_execution::HriMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.content);
      stream.next(m.from);
      stream.next(m.to);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HriMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_execution::HriMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_execution::HriMessage_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.content);
    s << indent << "from: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.from);
    s << indent << "to: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.to);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_EXECUTION_MESSAGE_HRIMESSAGE_H
