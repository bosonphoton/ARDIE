// Generated by gencpp from file segway_msgs/SuperAux.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_SUPERAUX_H
#define SEGWAY_MSGS_MESSAGE_SUPERAUX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace segway_msgs
{
template <class ContainerAllocator>
struct SuperAux_
{
  typedef SuperAux_<ContainerAllocator> Type;

  SuperAux_()
    : header()
    , battery_state_of_charge_percent(0.0)
    , battery_current_A0pk(0.0)
    , battery_voltage_V(0.0)
    , max_cell_temp_degc(0.0)
    , max_pcba_temp_degc(0.0)
    , max_cell_voltage_V(0.0)
    , min_cell_voltage_V(0.0)
    , battery_interface_status_bits(0)  {
    }
  SuperAux_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , battery_state_of_charge_percent(0.0)
    , battery_current_A0pk(0.0)
    , battery_voltage_V(0.0)
    , max_cell_temp_degc(0.0)
    , max_pcba_temp_degc(0.0)
    , max_cell_voltage_V(0.0)
    , min_cell_voltage_V(0.0)
    , battery_interface_status_bits(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _battery_state_of_charge_percent_type;
  _battery_state_of_charge_percent_type battery_state_of_charge_percent;

   typedef float _battery_current_A0pk_type;
  _battery_current_A0pk_type battery_current_A0pk;

   typedef float _battery_voltage_V_type;
  _battery_voltage_V_type battery_voltage_V;

   typedef float _max_cell_temp_degc_type;
  _max_cell_temp_degc_type max_cell_temp_degc;

   typedef float _max_pcba_temp_degc_type;
  _max_pcba_temp_degc_type max_pcba_temp_degc;

   typedef float _max_cell_voltage_V_type;
  _max_cell_voltage_V_type max_cell_voltage_V;

   typedef float _min_cell_voltage_V_type;
  _min_cell_voltage_V_type min_cell_voltage_V;

   typedef uint32_t _battery_interface_status_bits_type;
  _battery_interface_status_bits_type battery_interface_status_bits;





  typedef boost::shared_ptr< ::segway_msgs::SuperAux_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::SuperAux_<ContainerAllocator> const> ConstPtr;

}; // struct SuperAux_

typedef ::segway_msgs::SuperAux_<std::allocator<void> > SuperAux;

typedef boost::shared_ptr< ::segway_msgs::SuperAux > SuperAuxPtr;
typedef boost::shared_ptr< ::segway_msgs::SuperAux const> SuperAuxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::SuperAux_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::SuperAux_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::SuperAux_<ContainerAllocator1> & lhs, const ::segway_msgs::SuperAux_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.battery_state_of_charge_percent == rhs.battery_state_of_charge_percent &&
    lhs.battery_current_A0pk == rhs.battery_current_A0pk &&
    lhs.battery_voltage_V == rhs.battery_voltage_V &&
    lhs.max_cell_temp_degc == rhs.max_cell_temp_degc &&
    lhs.max_pcba_temp_degc == rhs.max_pcba_temp_degc &&
    lhs.max_cell_voltage_V == rhs.max_cell_voltage_V &&
    lhs.min_cell_voltage_V == rhs.min_cell_voltage_V &&
    lhs.battery_interface_status_bits == rhs.battery_interface_status_bits;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::SuperAux_<ContainerAllocator1> & lhs, const ::segway_msgs::SuperAux_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::SuperAux_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::SuperAux_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::SuperAux_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::SuperAux_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::SuperAux_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::SuperAux_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::SuperAux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34aa6b9336bda114f082ad32bd812cf5";
  }

  static const char* value(const ::segway_msgs::SuperAux_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34aa6b9336bda114ULL;
  static const uint64_t static_value2 = 0xf082ad32bd812cf5ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::SuperAux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/SuperAux";
  }

  static const char* value(const ::segway_msgs::SuperAux_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::SuperAux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 battery_state_of_charge_percent\n"
"float32 battery_current_A0pk\n"
"float32 battery_voltage_V\n"
"float32 max_cell_temp_degc\n"
"float32 max_pcba_temp_degc\n"
"float32 max_cell_voltage_V\n"
"float32 min_cell_voltage_V\n"
"uint32  battery_interface_status_bits\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::segway_msgs::SuperAux_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::SuperAux_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.battery_state_of_charge_percent);
      stream.next(m.battery_current_A0pk);
      stream.next(m.battery_voltage_V);
      stream.next(m.max_cell_temp_degc);
      stream.next(m.max_pcba_temp_degc);
      stream.next(m.max_cell_voltage_V);
      stream.next(m.min_cell_voltage_V);
      stream.next(m.battery_interface_status_bits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SuperAux_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::SuperAux_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::SuperAux_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "battery_state_of_charge_percent: ";
    Printer<float>::stream(s, indent + "  ", v.battery_state_of_charge_percent);
    s << indent << "battery_current_A0pk: ";
    Printer<float>::stream(s, indent + "  ", v.battery_current_A0pk);
    s << indent << "battery_voltage_V: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage_V);
    s << indent << "max_cell_temp_degc: ";
    Printer<float>::stream(s, indent + "  ", v.max_cell_temp_degc);
    s << indent << "max_pcba_temp_degc: ";
    Printer<float>::stream(s, indent + "  ", v.max_pcba_temp_degc);
    s << indent << "max_cell_voltage_V: ";
    Printer<float>::stream(s, indent + "  ", v.max_cell_voltage_V);
    s << indent << "min_cell_voltage_V: ";
    Printer<float>::stream(s, indent + "  ", v.min_cell_voltage_V);
    s << indent << "battery_interface_status_bits: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.battery_interface_status_bits);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_SUPERAUX_H
