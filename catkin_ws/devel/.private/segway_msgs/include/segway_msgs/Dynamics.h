// Generated by gencpp from file segway_msgs/Dynamics.msg
// DO NOT EDIT!


#ifndef SEGWAY_MSGS_MESSAGE_DYNAMICS_H
#define SEGWAY_MSGS_MESSAGE_DYNAMICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace segway_msgs
{
template <class ContainerAllocator>
struct Dynamics_
{
  typedef Dynamics_<ContainerAllocator> Type;

  Dynamics_()
    : header()
    , x_vel_target_mps(0.0)
    , y_vel_target_mps(0.0)
    , yaw_rate_target_rps(0.0)
    , vel_limit_mps(0.0)
    , yaw_rate_limit_rps(0.0)
    , wheel_vel_mps()
    , wheel_pos_m()
    , x_accel_mps2(0.0)
    , y_accel_mps2(0.0)
    , yaw_accel_mps2(0.0)
    , yaw_angle_rad(0.0)
    , odom_yaw_angle_rad(0.0)  {
    }
  Dynamics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x_vel_target_mps(0.0)
    , y_vel_target_mps(0.0)
    , yaw_rate_target_rps(0.0)
    , vel_limit_mps(0.0)
    , yaw_rate_limit_rps(0.0)
    , wheel_vel_mps(_alloc)
    , wheel_pos_m(_alloc)
    , x_accel_mps2(0.0)
    , y_accel_mps2(0.0)
    , yaw_accel_mps2(0.0)
    , yaw_angle_rad(0.0)
    , odom_yaw_angle_rad(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _x_vel_target_mps_type;
  _x_vel_target_mps_type x_vel_target_mps;

   typedef float _y_vel_target_mps_type;
  _y_vel_target_mps_type y_vel_target_mps;

   typedef float _yaw_rate_target_rps_type;
  _yaw_rate_target_rps_type yaw_rate_target_rps;

   typedef float _vel_limit_mps_type;
  _vel_limit_mps_type vel_limit_mps;

   typedef float _yaw_rate_limit_rps_type;
  _yaw_rate_limit_rps_type yaw_rate_limit_rps;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _wheel_vel_mps_type;
  _wheel_vel_mps_type wheel_vel_mps;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _wheel_pos_m_type;
  _wheel_pos_m_type wheel_pos_m;

   typedef float _x_accel_mps2_type;
  _x_accel_mps2_type x_accel_mps2;

   typedef float _y_accel_mps2_type;
  _y_accel_mps2_type y_accel_mps2;

   typedef float _yaw_accel_mps2_type;
  _yaw_accel_mps2_type yaw_accel_mps2;

   typedef float _yaw_angle_rad_type;
  _yaw_angle_rad_type yaw_angle_rad;

   typedef float _odom_yaw_angle_rad_type;
  _odom_yaw_angle_rad_type odom_yaw_angle_rad;





  typedef boost::shared_ptr< ::segway_msgs::Dynamics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_msgs::Dynamics_<ContainerAllocator> const> ConstPtr;

}; // struct Dynamics_

typedef ::segway_msgs::Dynamics_<std::allocator<void> > Dynamics;

typedef boost::shared_ptr< ::segway_msgs::Dynamics > DynamicsPtr;
typedef boost::shared_ptr< ::segway_msgs::Dynamics const> DynamicsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_msgs::Dynamics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_msgs::Dynamics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segway_msgs::Dynamics_<ContainerAllocator1> & lhs, const ::segway_msgs::Dynamics_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x_vel_target_mps == rhs.x_vel_target_mps &&
    lhs.y_vel_target_mps == rhs.y_vel_target_mps &&
    lhs.yaw_rate_target_rps == rhs.yaw_rate_target_rps &&
    lhs.vel_limit_mps == rhs.vel_limit_mps &&
    lhs.yaw_rate_limit_rps == rhs.yaw_rate_limit_rps &&
    lhs.wheel_vel_mps == rhs.wheel_vel_mps &&
    lhs.wheel_pos_m == rhs.wheel_pos_m &&
    lhs.x_accel_mps2 == rhs.x_accel_mps2 &&
    lhs.y_accel_mps2 == rhs.y_accel_mps2 &&
    lhs.yaw_accel_mps2 == rhs.yaw_accel_mps2 &&
    lhs.yaw_angle_rad == rhs.yaw_angle_rad &&
    lhs.odom_yaw_angle_rad == rhs.odom_yaw_angle_rad;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segway_msgs::Dynamics_<ContainerAllocator1> & lhs, const ::segway_msgs::Dynamics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::Dynamics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_msgs::Dynamics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::Dynamics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_msgs::Dynamics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::Dynamics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_msgs::Dynamics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_msgs::Dynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b23bce5066773fe1ee204d2d2317ad4";
  }

  static const char* value(const ::segway_msgs::Dynamics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b23bce5066773feULL;
  static const uint64_t static_value2 = 0x1ee204d2d2317ad4ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_msgs::Dynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_msgs/Dynamics";
  }

  static const char* value(const ::segway_msgs::Dynamics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_msgs::Dynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 x_vel_target_mps\n"
"float32 y_vel_target_mps\n"
"float32 yaw_rate_target_rps\n"
"float32 vel_limit_mps\n"
"float32 yaw_rate_limit_rps\n"
"float32[] wheel_vel_mps\n"
"float32[] wheel_pos_m\n"
"float32 x_accel_mps2\n"
"float32 y_accel_mps2\n"
"float32 yaw_accel_mps2\n"
"float32 yaw_angle_rad\n"
"float32 odom_yaw_angle_rad\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::segway_msgs::Dynamics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_msgs::Dynamics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x_vel_target_mps);
      stream.next(m.y_vel_target_mps);
      stream.next(m.yaw_rate_target_rps);
      stream.next(m.vel_limit_mps);
      stream.next(m.yaw_rate_limit_rps);
      stream.next(m.wheel_vel_mps);
      stream.next(m.wheel_pos_m);
      stream.next(m.x_accel_mps2);
      stream.next(m.y_accel_mps2);
      stream.next(m.yaw_accel_mps2);
      stream.next(m.yaw_angle_rad);
      stream.next(m.odom_yaw_angle_rad);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dynamics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_msgs::Dynamics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_msgs::Dynamics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x_vel_target_mps: ";
    Printer<float>::stream(s, indent + "  ", v.x_vel_target_mps);
    s << indent << "y_vel_target_mps: ";
    Printer<float>::stream(s, indent + "  ", v.y_vel_target_mps);
    s << indent << "yaw_rate_target_rps: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate_target_rps);
    s << indent << "vel_limit_mps: ";
    Printer<float>::stream(s, indent + "  ", v.vel_limit_mps);
    s << indent << "yaw_rate_limit_rps: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate_limit_rps);
    s << indent << "wheel_vel_mps[]" << std::endl;
    for (size_t i = 0; i < v.wheel_vel_mps.size(); ++i)
    {
      s << indent << "  wheel_vel_mps[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wheel_vel_mps[i]);
    }
    s << indent << "wheel_pos_m[]" << std::endl;
    for (size_t i = 0; i < v.wheel_pos_m.size(); ++i)
    {
      s << indent << "  wheel_pos_m[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wheel_pos_m[i]);
    }
    s << indent << "x_accel_mps2: ";
    Printer<float>::stream(s, indent + "  ", v.x_accel_mps2);
    s << indent << "y_accel_mps2: ";
    Printer<float>::stream(s, indent + "  ", v.y_accel_mps2);
    s << indent << "yaw_accel_mps2: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_accel_mps2);
    s << indent << "yaw_angle_rad: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle_rad);
    s << indent << "odom_yaw_angle_rad: ";
    Printer<float>::stream(s, indent + "  ", v.odom_yaw_angle_rad);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_MSGS_MESSAGE_DYNAMICS_H
