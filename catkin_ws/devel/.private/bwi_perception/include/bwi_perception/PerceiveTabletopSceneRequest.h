// Generated by gencpp from file bwi_perception/PerceiveTabletopSceneRequest.msg
// DO NOT EDIT!


#ifndef BWI_PERCEPTION_MESSAGE_PERCEIVETABLETOPSCENEREQUEST_H
#define BWI_PERCEPTION_MESSAGE_PERCEIVETABLETOPSCENEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bwi_perception
{
template <class ContainerAllocator>
struct PerceiveTabletopSceneRequest_
{
  typedef PerceiveTabletopSceneRequest_<ContainerAllocator> Type;

  PerceiveTabletopSceneRequest_()
    : override_filter_z(false)
    , min_z_value(0.0)
    , max_z_value(0.0)
    , apply_x_box_filter(false)
    , x_min(0.0)
    , x_max(0.0)  {
    }
  PerceiveTabletopSceneRequest_(const ContainerAllocator& _alloc)
    : override_filter_z(false)
    , min_z_value(0.0)
    , max_z_value(0.0)
    , apply_x_box_filter(false)
    , x_min(0.0)
    , x_max(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _override_filter_z_type;
  _override_filter_z_type override_filter_z;

   typedef float _min_z_value_type;
  _min_z_value_type min_z_value;

   typedef float _max_z_value_type;
  _max_z_value_type max_z_value;

   typedef uint8_t _apply_x_box_filter_type;
  _apply_x_box_filter_type apply_x_box_filter;

   typedef float _x_min_type;
  _x_min_type x_min;

   typedef float _x_max_type;
  _x_max_type x_max;





  typedef boost::shared_ptr< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PerceiveTabletopSceneRequest_

typedef ::bwi_perception::PerceiveTabletopSceneRequest_<std::allocator<void> > PerceiveTabletopSceneRequest;

typedef boost::shared_ptr< ::bwi_perception::PerceiveTabletopSceneRequest > PerceiveTabletopSceneRequestPtr;
typedef boost::shared_ptr< ::bwi_perception::PerceiveTabletopSceneRequest const> PerceiveTabletopSceneRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator1> & lhs, const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator2> & rhs)
{
  return lhs.override_filter_z == rhs.override_filter_z &&
    lhs.min_z_value == rhs.min_z_value &&
    lhs.max_z_value == rhs.max_z_value &&
    lhs.apply_x_box_filter == rhs.apply_x_box_filter &&
    lhs.x_min == rhs.x_min &&
    lhs.x_max == rhs.x_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator1> & lhs, const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bwi_perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4797499a3ce6a9cd6eae6e58945e1c3c";
  }

  static const char* value(const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4797499a3ce6a9cdULL;
  static const uint64_t static_value2 = 0x6eae6e58945e1c3cULL;
};

template<class ContainerAllocator>
struct DataType< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_perception/PerceiveTabletopSceneRequest";
  }

  static const char* value(const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# if you want to override the default z filter\n"
"bool override_filter_z\n"
"float32 min_z_value\n"
"float32 max_z_value\n"
"\n"
"# if you want to apply an x filter (i.e., side to side)\n"
"bool apply_x_box_filter\n"
"float32 x_min\n"
"float32 x_max\n"
;
  }

  static const char* value(const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.override_filter_z);
      stream.next(m.min_z_value);
      stream.next(m.max_z_value);
      stream.next(m.apply_x_box_filter);
      stream.next(m.x_min);
      stream.next(m.x_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceiveTabletopSceneRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bwi_perception::PerceiveTabletopSceneRequest_<ContainerAllocator>& v)
  {
    s << indent << "override_filter_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.override_filter_z);
    s << indent << "min_z_value: ";
    Printer<float>::stream(s, indent + "  ", v.min_z_value);
    s << indent << "max_z_value: ";
    Printer<float>::stream(s, indent + "  ", v.max_z_value);
    s << indent << "apply_x_box_filter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.apply_x_box_filter);
    s << indent << "x_min: ";
    Printer<float>::stream(s, indent + "  ", v.x_min);
    s << indent << "x_max: ";
    Printer<float>::stream(s, indent + "  ", v.x_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BWI_PERCEPTION_MESSAGE_PERCEIVETABLETOPSCENEREQUEST_H
